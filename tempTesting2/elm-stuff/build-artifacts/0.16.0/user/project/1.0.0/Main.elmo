Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $ElmFire = Elm.ElmFire.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var indexToLetter = function (index) {
      var _p0 = index;
      switch (_p0)
      {case 1: return "A";
         case 2: return "B";
         case 3: return "C";
         case 4: return "D";
         default: return "Answer out of bounds.";}
   };
   var update = F2(function (action,model) {
      var _p1 = action;
      switch (_p1.ctor)
      {case "SetQuestion": return {ctor: "_Tuple2"
                                  ,_0: _U.update(model,{question: _p1._0})
                                  ,_1: $Effects.none};
         case "SetAnswer": var _p3 = _p1._1;
           var _p2 = _p1._0;
           switch (_p2)
           {case 1: return {ctor: "_Tuple2"
                           ,_0: _U.update(model,{choice1: _p3})
                           ,_1: $Effects.none};
              case 2: return {ctor: "_Tuple2"
                             ,_0: _U.update(model,{choice2: _p3})
                             ,_1: $Effects.none};
              case 3: return {ctor: "_Tuple2"
                             ,_0: _U.update(model,{choice3: _p3})
                             ,_1: $Effects.none};
              case 4: return {ctor: "_Tuple2"
                             ,_0: _U.update(model,{choice4: _p3})
                             ,_1: $Effects.none};
              default: return {ctor: "_Tuple2"
                              ,_0: _U.update(model,{choice1: _p3})
                              ,_1: $Effects.none};}
         default: var _p4 = _p1._0;
           if (_p4 === true) {
                 return {ctor: "_Tuple2"
                        ,_0: _U.update(model,{answerIndex: _p1._1})
                        ,_1: $Effects.none};
              } else {
                 return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
              }}
   });
   var SetCorrectAnswer = F2(function (a,b) {
      return {ctor: "SetCorrectAnswer",_0: a,_1: b};
   });
   var SetAnswer = F2(function (a,b) {
      return {ctor: "SetAnswer",_0: a,_1: b};
   });
   var question = F3(function (address,textValue,newAnswerIndex) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.label,
              _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                                       ,_0: "padding"
                                                       ,_1: "20px"}]))]),
              _U.list([A2($Html.input,
                      _U.list([$Html$Attributes.type$("radio")
                              ,$Html$Attributes.name("question")
                              ,$Html$Attributes.checked(true)
                              ,A3($Html$Events.on,
                              "input",
                              $Html$Events.targetChecked,
                              function (bool) {
                                 return A2($Signal.message,
                                 address,
                                 A2(SetCorrectAnswer,bool,newAnswerIndex));
                              })]),
                      _U.list([]))
                      ,$Html.text(textValue)]))
              ,A2($Html.input,
              _U.list([$Html$Attributes.placeholder("Enter your answer here.")
                      ,A3($Html$Events.on,
                      "input",
                      $Html$Events.targetValue,
                      function (str) {
                         return A2($Signal.message,
                         address,
                         A2(SetAnswer,newAnswerIndex,str));
                      })]),
              _U.list([]))]));
   });
   var SetQuestion = function (a) {
      return {ctor: "SetQuestion",_0: a};
   };
   var Model = F6(function (a,b,c,d,e,f) {
      return {question: a
             ,choice1: b
             ,choice2: c
             ,choice3: d
             ,choice4: e
             ,answerIndex: f};
   });
   var model = A6(Model,
   "Your question will show here.",
   "A goes here.",
   "B goes here.",
   "C goes here.",
   "D goes here.",
   4);
   var init = {ctor: "_Tuple2",_0: model,_1: $Effects.none};
   var inputStringVoteCount = $Signal.mailbox("0%0%0%0");
   var runSetVoteCount = Elm.Native.Task.make(_elm).performSignal("runSetVoteCount",
   A2($Signal.map,
   function (str) {
      return A2($ElmFire.set,
      $Json$Encode.string(str),
      $ElmFire.fromUrl("https://elmproj.firebaseio.com/AnswerPicks"));
   },
   inputStringVoteCount.signal));
   var inputStringAI = $Signal.mailbox($Basics.toString(model.answerIndex));
   var runSetAI = Elm.Native.Task.make(_elm).performSignal("runSetAI",
   A2($Signal.map,
   function (str) {
      return A2($ElmFire.set,
      $Json$Encode.string(str),
      $ElmFire.fromUrl("https://elmproj.firebaseio.com/QuestionBody/AnswerIndex"));
   },
   inputStringAI.signal));
   var inputStringA4 = $Signal.mailbox(model.choice4);
   var runSetA4 = Elm.Native.Task.make(_elm).performSignal("runSetA4",
   A2($Signal.map,
   function (str) {
      return A2($ElmFire.set,
      $Json$Encode.string(str),
      $ElmFire.fromUrl("https://elmproj.firebaseio.com/QuestionBody/Answer4"));
   },
   inputStringA4.signal));
   var inputStringA3 = $Signal.mailbox(model.choice3);
   var runSetA3 = Elm.Native.Task.make(_elm).performSignal("runSetA3",
   A2($Signal.map,
   function (str) {
      return A2($ElmFire.set,
      $Json$Encode.string(str),
      $ElmFire.fromUrl("https://elmproj.firebaseio.com/QuestionBody/Answer3"));
   },
   inputStringA3.signal));
   var inputStringA2 = $Signal.mailbox(model.choice2);
   var runSetA2 = Elm.Native.Task.make(_elm).performSignal("runSetA2",
   A2($Signal.map,
   function (str) {
      return A2($ElmFire.set,
      $Json$Encode.string(str),
      $ElmFire.fromUrl("https://elmproj.firebaseio.com/QuestionBody/Answer2"));
   },
   inputStringA2.signal));
   var inputStringA1 = $Signal.mailbox(model.choice1);
   var runSetA1 = Elm.Native.Task.make(_elm).performSignal("runSetA1",
   A2($Signal.map,
   function (str) {
      return A2($ElmFire.set,
      $Json$Encode.string(str),
      $ElmFire.fromUrl("https://elmproj.firebaseio.com/QuestionBody/Answer1"));
   },
   inputStringA1.signal));
   var inputStringQ = $Signal.mailbox(model.question);
   var runSet = Elm.Native.Task.make(_elm).performSignal("runSet",
   A2($Signal.map,
   function (str) {
      return A2($ElmFire.set,
      $Json$Encode.string(str),
      $ElmFire.fromUrl("https://elmproj.firebaseio.com/QuestionBody/Question"));
   },
   inputStringQ.signal));
   var proxy = $Signal.mailbox(_U.list([]));
   var broadcast = Elm.Native.Task.make(_elm).performSignal("broadcast",
   function () {
      var tasks = $List.map($Basics.uncurry($Signal.send));
      return A2($Signal.map,
      function (_p5) {
         return $Task.sequence(tasks(_p5));
      },
      proxy.signal);
   }());
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.br,_U.list([]),_U.list([]))
              ,A2($Html.fieldset,
              _U.list([]),
              _U.list([A2($Html.div,
                      _U.list([]),
                      _U.list([$Html.text("Question ")
                              ,A2($Html.input,
                              _U.list([$Html$Attributes.placeholder("Enter your question here.")
                                      ,A3($Html$Events.on,
                                      "input",
                                      $Html$Events.targetValue,
                                      function (str) {
                                         return A2($Signal.message,address,SetQuestion(str));
                                      })]),
                              _U.list([]))]))
                      ,A2($Html.br,_U.list([]),_U.list([]))
                      ,A2($Html.div,
                      _U.list([]),
                      _U.list([$Html.text("Set one answer as the correct answer.")]))
                      ,A2($Html.br,_U.list([]),_U.list([]))
                      ,A3(question,address,"A",1)
                      ,A2($Html.br,_U.list([]),_U.list([]))
                      ,A3(question,address,"B",2)
                      ,A2($Html.br,_U.list([]),_U.list([]))
                      ,A3(question,address,"C",3)
                      ,A2($Html.br,_U.list([]),_U.list([]))
                      ,A3(question,address,"D",4)
                      ,A2($Html.br,_U.list([]),_U.list([]))
                      ,A2($Html.button,
                      _U.list([A2($Html$Events.onClick,
                      proxy.address,
                      _U.list([{ctor: "_Tuple2"
                               ,_0: inputStringQ.address
                               ,_1: model.question}
                              ,{ctor: "_Tuple2",_0: inputStringA1.address,_1: model.choice1}
                              ,{ctor: "_Tuple2",_0: inputStringA2.address,_1: model.choice2}
                              ,{ctor: "_Tuple2",_0: inputStringA3.address,_1: model.choice3}
                              ,{ctor: "_Tuple2",_0: inputStringA4.address,_1: model.choice4}
                              ,{ctor: "_Tuple2"
                               ,_0: inputStringAI.address
                               ,_1: $Basics.toString(model.answerIndex)}
                              ,{ctor: "_Tuple2"
                               ,_0: inputStringVoteCount.address
                               ,_1: "0%0%0%0"}]))]),
                      _U.list([$Html.text("Submit")]))]))
              ,A2($Html.br,_U.list([]),_U.list([]))
              ,A2($Html.br,_U.list([]),_U.list([]))
              ,A2($Html.fieldset,
              _U.list([]),
              _U.list([A2($Html.div,
                      _U.list([]),
                      _U.list([$Html.text(model.question)]))
                      ,A2($Html.div,
                      _U.list([]),
                      _U.list([$Html.text(A2($Basics._op["++"],
                      "A ) ",
                      model.choice1))]))
                      ,A2($Html.div,
                      _U.list([]),
                      _U.list([$Html.text(A2($Basics._op["++"],
                      "B ) ",
                      model.choice2))]))
                      ,A2($Html.div,
                      _U.list([]),
                      _U.list([$Html.text(A2($Basics._op["++"],
                      "C ) ",
                      model.choice3))]))
                      ,A2($Html.div,
                      _U.list([]),
                      _U.list([$Html.text(A2($Basics._op["++"],
                      "D ) ",
                      model.choice4))]))
                      ,A2($Html.div,
                      _U.list([]),
                      _U.list([$Html.text(A2($Basics._op["++"],
                      "The correct answer is ",
                      A2($Basics._op["++"],indexToLetter(model.answerIndex),".")))]))
                      ,A2($Html.br,_U.list([]),_U.list([]))]))
              ,A2($Html.br,_U.list([]),_U.list([]))
              ,A2($Html.br,_U.list([]),_U.list([]))]));
   });
   var app = $StartApp.start({init: init
                             ,update: update
                             ,view: view
                             ,inputs: _U.list([])});
   var main = app.html;
   return _elm.Main.values = {_op: _op
                             ,proxy: proxy
                             ,inputStringQ: inputStringQ
                             ,inputStringA1: inputStringA1
                             ,inputStringA2: inputStringA2
                             ,inputStringA3: inputStringA3
                             ,inputStringA4: inputStringA4
                             ,inputStringAI: inputStringAI
                             ,inputStringVoteCount: inputStringVoteCount
                             ,app: app
                             ,main: main
                             ,init: init
                             ,Model: Model
                             ,model: model
                             ,SetQuestion: SetQuestion
                             ,SetAnswer: SetAnswer
                             ,SetCorrectAnswer: SetCorrectAnswer
                             ,update: update
                             ,view: view
                             ,indexToLetter: indexToLetter
                             ,question: question};
};