Elm.ElmFire = Elm.ElmFire || {};
Elm.ElmFire.make = function (_elm) {
   "use strict";
   _elm.ElmFire = _elm.ElmFire || {};
   if (_elm.ElmFire.values) return _elm.ElmFire.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Native$ElmFire = Elm.Native.ElmFire.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var serverTimeStamp = $Native$ElmFire.serverTimeStamp;
   var goOnline = $Native$ElmFire.setOffline(false);
   var goOffline = $Native$ElmFire.setOffline(true);
   var exportValue = $Native$ElmFire.exportValue;
   var toPairList = $Native$ElmFire.toPairList;
   var toKeyList = $Native$ElmFire.toKeyList;
   var toValueList = $Native$ElmFire.toValueList;
   var toSnapshotList = $Native$ElmFire.toSnapshotList;
   var LimitToLast = function (a) {
      return {ctor: "LimitToLast",_0: a};
   };
   var limitToLast = LimitToLast;
   var LimitToFirst = function (a) {
      return {ctor: "LimitToFirst",_0: a};
   };
   var limitToFirst = LimitToFirst;
   var NoLimit = {ctor: "NoLimit"};
   var noLimit = NoLimit;
   var EqualTo = function (a) {
      return {ctor: "EqualTo",_0: a};
   };
   var equalTo = EqualTo;
   var Range = F2(function (a,b) {
      return {ctor: "Range",_0: a,_1: b};
   });
   var range = Range;
   var EndAt = function (a) {    return {ctor: "EndAt",_0: a};};
   var endAt = EndAt;
   var StartAt = function (a) {
      return {ctor: "StartAt",_0: a};
   };
   var startAt = StartAt;
   var NoRange = {ctor: "NoRange"};
   var noRange = NoRange;
   var OrderByPriority = F2(function (a,b) {
      return {ctor: "OrderByPriority",_0: a,_1: b};
   });
   var orderByPriority = OrderByPriority;
   var OrderByKey = F2(function (a,b) {
      return {ctor: "OrderByKey",_0: a,_1: b};
   });
   var orderByKey = OrderByKey;
   var OrderByValue = F2(function (a,b) {
      return {ctor: "OrderByValue",_0: a,_1: b};
   });
   var orderByValue = OrderByValue;
   var OrderByChild = F3(function (a,b,c) {
      return {ctor: "OrderByChild",_0: a,_1: b,_2: c};
   });
   var orderByChild = OrderByChild;
   var NoOrder = {ctor: "NoOrder"};
   var noOrder = NoOrder;
   var ChildMoved = function (a) {
      return {ctor: "ChildMoved",_0: a};
   };
   var childMoved = ChildMoved;
   var ChildRemoved = function (a) {
      return {ctor: "ChildRemoved",_0: a};
   };
   var childRemoved = ChildRemoved;
   var ChildChanged = function (a) {
      return {ctor: "ChildChanged",_0: a};
   };
   var childChanged = ChildChanged;
   var ChildAdded = function (a) {
      return {ctor: "ChildAdded",_0: a};
   };
   var childAdded = ChildAdded;
   var ValueChanged = function (a) {
      return {ctor: "ValueChanged",_0: a};
   };
   var valueChanged = ValueChanged;
   var once = $Native$ElmFire.once;
   var unsubscribe = $Native$ElmFire.unsubscribe;
   var subscribeConditional = $Native$ElmFire.subscribeConditional;
   var subscribe = function (createResponseTask) {
      return subscribeConditional(function (_p0) {
         return $Maybe.Just(createResponseTask(_p0));
      });
   };
   var onDisconnectCancel = $Native$ElmFire.onDisconnectCancel;
   var onDisconnectRemove = $Native$ElmFire.remove(true);
   var onDisconnectUpdate = $Native$ElmFire.update(true);
   var onDisconnectSetWithPriority = $Native$ElmFire.setWithPriority(true);
   var onDisconnectSet = $Native$ElmFire.set(true);
   var transaction = $Native$ElmFire.transaction;
   var remove = $Native$ElmFire.remove(false);
   var update = $Native$ElmFire.update(false);
   var setPriority = $Native$ElmFire.setPriority;
   var setWithPriority = $Native$ElmFire.setWithPriority(false);
   var set = $Native$ElmFire.set(false);
   var open = $Native$ElmFire.open;
   var key = $Native$ElmFire.key;
   var toUrl = $Native$ElmFire.toUrl;
   var Set = function (a) {    return {ctor: "Set",_0: a};};
   var Remove = {ctor: "Remove"};
   var Abort = {ctor: "Abort"};
   var SnapshotFB = {ctor: "SnapshotFB"};
   var Snapshot = F8(function (a,b,c,d,e,f,g,h) {
      return {subscription: a
             ,key: b
             ,reference: c
             ,existing: d
             ,value: e
             ,prevKey: f
             ,priority: g
             ,intern_: h};
   });
   var QueryError = F2(function (a,b) {
      return {ctor: "QueryError",_0: a,_1: b};
   });
   var Unsubscribed = function (a) {
      return {ctor: "Unsubscribed",_0: a};
   };
   var Subscription = {ctor: "Subscription"};
   var StringPriority = function (a) {
      return {ctor: "StringPriority",_0: a};
   };
   var NumberPriority = function (a) {
      return {ctor: "NumberPriority",_0: a};
   };
   var NoPriority = {ctor: "NoPriority"};
   var Reference = {ctor: "Reference"};
   var RefLocation = function (a) {
      return {ctor: "RefLocation",_0: a};
   };
   var location = RefLocation;
   var PushLocation = function (a) {
      return {ctor: "PushLocation",_0: a};
   };
   var push = PushLocation;
   var RootLocation = function (a) {
      return {ctor: "RootLocation",_0: a};
   };
   var root = RootLocation;
   var ParentLocation = function (a) {
      return {ctor: "ParentLocation",_0: a};
   };
   var parent = ParentLocation;
   var SubLocation = F2(function (a,b) {
      return {ctor: "SubLocation",_0: a,_1: b};
   });
   var sub = SubLocation;
   var subscribeConnected = F2(function (createResponseTask,
   location) {
      return A4(subscribeConditional,
      function (snapshot) {
         var _p1 = A2($Json$Decode.decodeValue,
         $Json$Decode.bool,
         snapshot.value);
         if (_p1.ctor === "Ok") {
               return $Maybe.Just(createResponseTask(_p1._0));
            } else {
               return $Maybe.Nothing;
            }
      },
      $Basics.always($Task.succeed({ctor: "_Tuple0"})),
      valueChanged(noOrder),
      A2(sub,".info/connected",root(location)));
   });
   var subscribeServerTimeOffset = F2(function (createResponseTask,
   location) {
      return A4(subscribeConditional,
      function (snapshot) {
         var _p2 = A2($Json$Decode.decodeValue,
         $Json$Decode.$float,
         snapshot.value);
         if (_p2.ctor === "Ok") {
               return $Maybe.Just(createResponseTask(_p2._0 * $Time.millisecond));
            } else {
               return $Maybe.Nothing;
            }
      },
      $Basics.always($Task.succeed({ctor: "_Tuple0"})),
      valueChanged(noOrder),
      A2(sub,".info/serverTimeOffset",root(location)));
   });
   var UrlLocation = function (a) {
      return {ctor: "UrlLocation",_0: a};
   };
   var fromUrl = UrlLocation;
   var OtherAuthenticationError = {ctor: "OtherAuthenticationError"};
   var UserDenied = {ctor: "UserDenied"};
   var UserCancelled = {ctor: "UserCancelled"};
   var UnknownError = {ctor: "UnknownError"};
   var TransportUnavailable = {ctor: "TransportUnavailable"};
   var ProviderError = {ctor: "ProviderError"};
   var NetworkError = {ctor: "NetworkError"};
   var InvalidUser = {ctor: "InvalidUser"};
   var InvalidToken = {ctor: "InvalidToken"};
   var InvalidProvider = {ctor: "InvalidProvider"};
   var InvalidPassword = {ctor: "InvalidPassword"};
   var InvalidOrigin = {ctor: "InvalidOrigin"};
   var InvalidEmail = {ctor: "InvalidEmail"};
   var InvalidCredentials = {ctor: "InvalidCredentials"};
   var InvalidConfiguration = {ctor: "InvalidConfiguration"};
   var InvalidArguments = {ctor: "InvalidArguments"};
   var EmailTaken = {ctor: "EmailTaken"};
   var AuthenticationDisabled = {ctor: "AuthenticationDisabled"};
   var UnknownSubscription = {ctor: "UnknownSubscription"};
   var AuthError = function (a) {
      return {ctor: "AuthError",_0: a};
   };
   var OtherFirebaseError = {ctor: "OtherFirebaseError"};
   var TooBigError = {ctor: "TooBigError"};
   var UnavailableError = {ctor: "UnavailableError"};
   var PermissionError = {ctor: "PermissionError"};
   var LocationError = {ctor: "LocationError"};
   var Error = F2(function (a,b) {
      return {tag: a,description: b};
   });
   return _elm.ElmFire.values = {_op: _op
                                ,fromUrl: fromUrl
                                ,sub: sub
                                ,parent: parent
                                ,root: root
                                ,push: push
                                ,open: open
                                ,key: key
                                ,toUrl: toUrl
                                ,location: location
                                ,set: set
                                ,setWithPriority: setWithPriority
                                ,setPriority: setPriority
                                ,update: update
                                ,remove: remove
                                ,transaction: transaction
                                ,subscribe: subscribe
                                ,unsubscribe: unsubscribe
                                ,once: once
                                ,valueChanged: valueChanged
                                ,childAdded: childAdded
                                ,childChanged: childChanged
                                ,childRemoved: childRemoved
                                ,childMoved: childMoved
                                ,noOrder: noOrder
                                ,orderByChild: orderByChild
                                ,orderByValue: orderByValue
                                ,orderByKey: orderByKey
                                ,orderByPriority: orderByPriority
                                ,noRange: noRange
                                ,startAt: startAt
                                ,endAt: endAt
                                ,range: range
                                ,equalTo: equalTo
                                ,noLimit: noLimit
                                ,limitToFirst: limitToFirst
                                ,limitToLast: limitToLast
                                ,toSnapshotList: toSnapshotList
                                ,toValueList: toValueList
                                ,toKeyList: toKeyList
                                ,toPairList: toPairList
                                ,exportValue: exportValue
                                ,goOffline: goOffline
                                ,goOnline: goOnline
                                ,subscribeConnected: subscribeConnected
                                ,onDisconnectSet: onDisconnectSet
                                ,onDisconnectSetWithPriority: onDisconnectSetWithPriority
                                ,onDisconnectUpdate: onDisconnectUpdate
                                ,onDisconnectRemove: onDisconnectRemove
                                ,onDisconnectCancel: onDisconnectCancel
                                ,serverTimeStamp: serverTimeStamp
                                ,subscribeServerTimeOffset: subscribeServerTimeOffset
                                ,Snapshot: Snapshot
                                ,Error: Error
                                ,NoPriority: NoPriority
                                ,NumberPriority: NumberPriority
                                ,StringPriority: StringPriority
                                ,Abort: Abort
                                ,Remove: Remove
                                ,Set: Set
                                ,Unsubscribed: Unsubscribed
                                ,QueryError: QueryError
                                ,LocationError: LocationError
                                ,PermissionError: PermissionError
                                ,UnavailableError: UnavailableError
                                ,TooBigError: TooBigError
                                ,OtherFirebaseError: OtherFirebaseError
                                ,AuthError: AuthError
                                ,UnknownSubscription: UnknownSubscription
                                ,AuthenticationDisabled: AuthenticationDisabled
                                ,EmailTaken: EmailTaken
                                ,InvalidArguments: InvalidArguments
                                ,InvalidConfiguration: InvalidConfiguration
                                ,InvalidCredentials: InvalidCredentials
                                ,InvalidEmail: InvalidEmail
                                ,InvalidOrigin: InvalidOrigin
                                ,InvalidPassword: InvalidPassword
                                ,InvalidProvider: InvalidProvider
                                ,InvalidToken: InvalidToken
                                ,InvalidUser: InvalidUser
                                ,NetworkError: NetworkError
                                ,ProviderError: ProviderError
                                ,TransportUnavailable: TransportUnavailable
                                ,UnknownError: UnknownError
                                ,UserCancelled: UserCancelled
                                ,UserDenied: UserDenied
                                ,OtherAuthenticationError: OtherAuthenticationError};
};