Elm.Answers = Elm.Answers || {};
Elm.Answers.make = function (_elm) {
   "use strict";
   _elm.Answers = _elm.Answers || {};
   if (_elm.Answers.values) return _elm.Answers.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $ElmFire = Elm.ElmFire.make(_elm),
   $ElmFire$Dict = Elm.ElmFire.Dict.make(_elm),
   $ElmFire$Op = Elm.ElmFire.Op.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var indexToLetter = function (index) {
      var _p0 = index;
      switch (_p0)
      {case 1: return "A";
         case 2: return "B";
         case 3: return "C";
         case 4: return "D";
         default: return "Answer out of bounds.";}
   };
   var augment = function (model) {
      var itemList = $Dict.toList(model.items);
      return {itemList: itemList};
   };
   var AugModel = function (a) {    return {itemList: a};};
   var AddParamsChoices = function (a) {
      return {ctor: "AddParamsChoices",_0: a};
   };
   var ClearVotes = {ctor: "ClearVotes"};
   var Vote = {ctor: "Vote"};
   var SetTempAnswer = F2(function (a,b) {
      return {ctor: "SetTempAnswer",_0: a,_1: b};
   });
   var questionMaker = F3(function (address,textValue,index) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.label,
              _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                                       ,_0: "padding"
                                                       ,_1: "20px"}]))]),
              _U.list([A2($Html.input,
                      _U.list([$Html$Attributes.type$("radio")
                              ,$Html$Attributes.name("question")
                              ,A3($Html$Events.on,
                              "input",
                              $Html$Events.targetChecked,
                              function (bool) {
                                 return A2($Signal.message,
                                 address,
                                 A2(SetTempAnswer,bool,index));
                              })]),
                      _U.list([]))
                      ,$Html.text(A2($Basics._op["++"],indexToLetter(index),")"))]))
              ,$Html.text(textValue)]));
   });
   var SetAPIKey = function (a) {
      return {ctor: "SetAPIKey",_0: a};
   };
   var FromEffect = {ctor: "FromEffect"};
   var FromServer = function (a) {
      return {ctor: "FromServer",_0: a};
   };
   var kickOff = function (_p1) {
      return $Effects.task(A2($Task.map,
      $Basics.always(FromEffect),
      $Task.toMaybe(_p1)));
   };
   var initialModel = {items: $Dict.empty
                      ,apiKey: ""
                      ,modAnswerIndex: 0};
   var Item2 = function (a) {    return {cs152: a};};
   var Item = F5(function (a,b,c,d,e) {
      return {question: a
             ,choice1: b
             ,choice2: c
             ,choice3: d
             ,choice4: e};
   });
   var Model = F3(function (a,b,c) {
      return {items: a,apiKey: b,modAnswerIndex: c};
   });
   var proxy = $Signal.mailbox(_U.list([]));
   var broadcast = Elm.Native.Task.make(_elm).performSignal("broadcast",
   function () {
      var tasks = $List.map($Basics.uncurry($Signal.send));
      return A2($Signal.map,
      function (_p2) {
         return $Task.sequence(tasks(_p2));
      },
      proxy.signal);
   }());
   var view = F2(function (actionAddress,model) {
      var augmodel = augment(model);
      var itemList = augmodel.itemList;
      var code = model.apiKey;
      var codeChecker = function (_p3) {
         var _p4 = _p3;
         return _U.eq(_p4._0,code) ? true : false;
      };
      var singleList = A2($List.filter,codeChecker,itemList);
      var array = $Array.fromList(singleList);
      var tuple = A2($Maybe.withDefault,
      {ctor: "_Tuple2"
      ,_0: ""
      ,_1: {question: ""
           ,choice1: ""
           ,choice2: ""
           ,choice3: ""
           ,choice4: ""}},
      A2($Array.get,0,array));
      var item = $Basics.snd(tuple);
      var question = item.question;
      var choice1 = item.choice1;
      var choice2 = item.choice2;
      var choice3 = item.choice3;
      var choice4 = item.choice4;
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.fieldset,
              _U.list([]),
              _U.list([A2($Html.div,
                      _U.list([]),
                      _U.list([A2($Html.input,
                      _U.list([$Html$Attributes.placeholder("API KEY HERE")
                              ,$Html$Attributes.autofocus(true)
                              ,A3($Html$Events.on,
                              "input",
                              $Html$Events.targetValue,
                              function (_p5) {
                                 return A2($Signal.message,actionAddress,SetAPIKey(_p5));
                              })]),
                      _U.list([]))]))
                      ,A2($Html.br,_U.list([]),_U.list([]))]))
              ,A2($Html.br,_U.list([]),_U.list([]))
              ,A2($Html.br,_U.list([]),_U.list([]))
              ,A2($Html.fieldset,
              _U.list([]),
              _U.list([A2($Html.div,
                      _U.list([]),
                      _U.list([A2($Html.label,
                              _U.list([]),
                              _U.list([$Html.text("Question: ")
                                      ,A2($Html.output,_U.list([]),_U.list([$Html.text(question)]))]))
                              ,A2($Html.br,_U.list([]),_U.list([]))
                              ,A2($Html.br,_U.list([]),_U.list([]))]))
                      ,A3(questionMaker,actionAddress,choice1,1)
                      ,A2($Html.br,_U.list([]),_U.list([]))
                      ,A2($Html.br,_U.list([]),_U.list([]))
                      ,A3(questionMaker,actionAddress,choice2,2)
                      ,A2($Html.br,_U.list([]),_U.list([]))
                      ,A2($Html.br,_U.list([]),_U.list([]))
                      ,A3(questionMaker,actionAddress,choice3,3)
                      ,A2($Html.br,_U.list([]),_U.list([]))
                      ,A2($Html.br,_U.list([]),_U.list([]))
                      ,A3(questionMaker,actionAddress,choice4,4)
                      ,A2($Html.br,_U.list([]),_U.list([]))
                      ,A2($Html.br,_U.list([]),_U.list([]))
                      ,A2($Html.button,
                      _U.list([A2($Html$Events.onClick,actionAddress,Vote)]),
                      _U.list([$Html.text("Vote")]))
                      ,A2($Html.button,
                      _U.list([A2($Html$Events.onClick,
                      proxy.address,
                      _U.list([{ctor: "_Tuple2",_0: actionAddress,_1: ClearVotes}
                              ,{ctor: "_Tuple2",_0: actionAddress,_1: AddParamsChoices("1")}
                              ,{ctor: "_Tuple2",_0: actionAddress,_1: AddParamsChoices("2")}
                              ,{ctor: "_Tuple2",_0: actionAddress,_1: AddParamsChoices("3")}
                              ,{ctor: "_Tuple2"
                               ,_0: actionAddress
                               ,_1: AddParamsChoices("4")}]))]),
                      _U.list([$Html.text("Clear All Votes")]))]))]));
   });
   var firebase_test = "https://elmproj.firebaseio.com/Questions";
   var firebaseUrl = firebase_test;
   var syncConfig = {location: $ElmFire.fromUrl(firebaseUrl)
                    ,orderOptions: $ElmFire.noOrder
                    ,encoder: function (item) {
                       return $Json$Encode.object(_U.list([{ctor: "_Tuple2"
                                                           ,_0: "Question"
                                                           ,_1: $Json$Encode.string(item.question)}
                                                          ,{ctor: "_Tuple2"
                                                           ,_0: "Choice1"
                                                           ,_1: $Json$Encode.string(item.choice1)}
                                                          ,{ctor: "_Tuple2"
                                                           ,_0: "Choice2"
                                                           ,_1: $Json$Encode.string(item.choice2)}
                                                          ,{ctor: "_Tuple2"
                                                           ,_0: "Choice3"
                                                           ,_1: $Json$Encode.string(item.choice3)}
                                                          ,{ctor: "_Tuple2"
                                                           ,_0: "Choice4"
                                                           ,_1: $Json$Encode.string(item.choice4)}]));
                    }
                    ,decoder: A6($Json$Decode.object5,
                    Item,
                    A2($Json$Decode._op[":="],"Question",$Json$Decode.string),
                    A2($Json$Decode._op[":="],"Choice1",$Json$Decode.string),
                    A2($Json$Decode._op[":="],"Choice2",$Json$Decode.string),
                    A2($Json$Decode._op[":="],"Choice3",$Json$Decode.string),
                    A2($Json$Decode._op[":="],"Choice4",$Json$Decode.string))};
   var _p6 = $ElmFire$Dict.mirror(syncConfig);
   var initialTask = _p6._0;
   var inputItems = _p6._1;
   var initialEffect = kickOff(initialTask);
   var effectItems = function (operation) {
      return kickOff(A2($ElmFire$Op.operate,syncConfig,operation));
   };
   var syncConfigString = function (apiKey) {
      return {location: $ElmFire.fromUrl(A2($Basics._op["++"],
             firebaseUrl,
             A2($Basics._op["++"],"/",apiKey)))
             ,orderOptions: $ElmFire.noOrder
             ,encoder: function (item) {
                return $Json$Encode.object(_U.list([{ctor: "_Tuple2"
                                                    ,_0: "Question"
                                                    ,_1: $Json$Encode.string(item.question)}
                                                   ,{ctor: "_Tuple2"
                                                    ,_0: "Choice1"
                                                    ,_1: $Json$Encode.string(item.choice1)}
                                                   ,{ctor: "_Tuple2"
                                                    ,_0: "Choice2"
                                                    ,_1: $Json$Encode.string(item.choice2)}
                                                   ,{ctor: "_Tuple2"
                                                    ,_0: "Choice3"
                                                    ,_1: $Json$Encode.string(item.choice3)}
                                                   ,{ctor: "_Tuple2"
                                                    ,_0: "Choice4"
                                                    ,_1: $Json$Encode.string(item.choice4)}]));
             }
             ,decoder: A6($Json$Decode.object5,
             Item,
             A2($Json$Decode._op[":="],"Question",$Json$Decode.string),
             A2($Json$Decode._op[":="],"Choice1",$Json$Decode.string),
             A2($Json$Decode._op[":="],"Choice2",$Json$Decode.string),
             A2($Json$Decode._op[":="],"Choice3",$Json$Decode.string),
             A2($Json$Decode._op[":="],"Choice4",$Json$Decode.string))};
   };
   var effectItemsString = F2(function (str,operation) {
      return kickOff(A2($ElmFire$Op.operate,
      syncConfigString(str),
      operation));
   });
   var syncConfigDblString = F2(function (apiKey,choiceIndex) {
      return {location: $ElmFire.fromUrl(A2($Basics._op["++"],
             firebaseUrl,
             A2($Basics._op["++"],
             "/",
             A2($Basics._op["++"],
             apiKey,
             A2($Basics._op["++"],"/Votes/C",choiceIndex)))))
             ,orderOptions: $ElmFire.noOrder
             ,encoder: function (item) {
                return $Json$Encode.object(_U.list([{ctor: "_Tuple2"
                                                    ,_0: "cs152"
                                                    ,_1: $Json$Encode.string(item.cs152)}]));
             }
             ,decoder: A2($Json$Decode.object1,
             Item2,
             A2($Json$Decode._op[":="],"cs152",$Json$Decode.string))};
   });
   var effectItemsDblString = F3(function (str,str2,operation) {
      return kickOff(A2($ElmFire$Op.operate,
      A2(syncConfigDblString,str,str2),
      operation));
   });
   var updateState = F2(function (action,model) {
      var _p7 = action;
      switch (_p7.ctor)
      {case "FromEffect": return {ctor: "_Tuple2"
                                 ,_0: model
                                 ,_1: $Effects.none};
         case "FromServer": return {ctor: "_Tuple2"
                                   ,_0: _U.update(model,{items: _p7._0})
                                   ,_1: $Effects.none};
         case "SetAPIKey": return {ctor: "_Tuple2"
                                  ,_0: _U.update(model,{apiKey: _p7._0})
                                  ,_1: $Effects.none};
         case "SetTempAnswer": var _p8 = _p7._0;
           if (_p8 === true) {
                 return {ctor: "_Tuple2"
                        ,_0: _U.update(model,{modAnswerIndex: _p7._1})
                        ,_1: $Effects.none};
              } else {
                 return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
              }
         case "Vote":
         var indexStr = $Basics.toString(model.modAnswerIndex);
           return {ctor: "_Tuple2"
                  ,_0: model
                  ,_1: A3(effectItemsDblString,
                  model.apiKey,
                  indexStr,
                  $ElmFire$Op.push({cs152: "cs152"}))};
         case "ClearVotes": return {ctor: "_Tuple2"
                                   ,_0: model
                                   ,_1: A2(effectItemsString,
                                   model.apiKey,
                                   $ElmFire$Op.remove("Votes"))};
         default: return {ctor: "_Tuple2"
                         ,_0: model
                         ,_1: A3(effectItemsDblString,
                         model.apiKey,
                         _p7._0,
                         $ElmFire$Op.push({cs152: "cs152"}))};}
   });
   var config = {init: {ctor: "_Tuple2"
                       ,_0: initialModel
                       ,_1: initialEffect}
                ,update: updateState
                ,view: view
                ,inputs: _U.list([A2($Signal.map,FromServer,inputItems)])};
   var app = $StartApp.start(config);
   var runEffects = Elm.Native.Task.make(_elm).performSignal("runEffects",
   app.tasks);
   var main = app.html;
   var firebase_foreign = "https://elmproj.firebaseio.com/Questions";
   return _elm.Answers.values = {_op: _op
                                ,firebase_foreign: firebase_foreign
                                ,firebase_test: firebase_test
                                ,firebaseUrl: firebaseUrl
                                ,config: config
                                ,app: app
                                ,proxy: proxy
                                ,main: main
                                ,Model: Model
                                ,Item: Item
                                ,Item2: Item2
                                ,initialModel: initialModel
                                ,initialTask: initialTask
                                ,inputItems: inputItems
                                ,initialEffect: initialEffect
                                ,syncConfig: syncConfig
                                ,effectItems: effectItems
                                ,syncConfigString: syncConfigString
                                ,effectItemsString: effectItemsString
                                ,syncConfigDblString: syncConfigDblString
                                ,effectItemsDblString: effectItemsDblString
                                ,kickOff: kickOff
                                ,FromServer: FromServer
                                ,FromEffect: FromEffect
                                ,SetAPIKey: SetAPIKey
                                ,SetTempAnswer: SetTempAnswer
                                ,Vote: Vote
                                ,ClearVotes: ClearVotes
                                ,AddParamsChoices: AddParamsChoices
                                ,updateState: updateState
                                ,AugModel: AugModel
                                ,augment: augment
                                ,view: view
                                ,questionMaker: questionMaker
                                ,indexToLetter: indexToLetter};
};