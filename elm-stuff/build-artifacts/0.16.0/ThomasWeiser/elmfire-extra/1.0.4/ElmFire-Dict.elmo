Elm.ElmFire = Elm.ElmFire || {};
Elm.ElmFire.Dict = Elm.ElmFire.Dict || {};
Elm.ElmFire.Dict.make = function (_elm) {
   "use strict";
   _elm.ElmFire = _elm.ElmFire || {};
   _elm.ElmFire.Dict = _elm.ElmFire.Dict || {};
   if (_elm.ElmFire.Dict.values) return _elm.ElmFire.Dict.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $ElmFire = Elm.ElmFire.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var update = F2(function (delta,dict) {
      var _p0 = delta;
      switch (_p0.ctor)
      {case "Idem": return dict;
         case "Added": return A3($Dict.insert,_p0._0,_p0._1,dict);
         case "Changed": return A3($Dict.insert,_p0._0,_p0._1,dict);
         case "Removed": return A2($Dict.remove,_p0._0,dict);
         case "Undecodable": return dict;
         case "Unsubscribed": return dict;
         default: return dict;}
   });
   var integrate = function (deltas) {    return A3($Signal.foldp,update,$Dict.empty,deltas);};
   var getValues = function (config) {
      var decodeValueList = $List.filterMap(function (_p1) {    return $Result.toMaybe(A2($Json$Decode.decodeValue,config.decoder,_p1));});
      return A2($Task.map,
      function (_p2) {
         return decodeValueList($ElmFire.toValueList(_p2));
      },
      A2($ElmFire.once,$ElmFire.valueChanged(config.orderOptions),config.location));
   };
   var getKeys = function (config) {    return A2($Task.map,$ElmFire.toKeyList,A2($ElmFire.once,$ElmFire.valueChanged(config.orderOptions),config.location));};
   var getList = function (config) {
      var decodePairList = $List.filterMap(function (_p3) {
         var _p4 = _p3;
         var _p5 = A2($Json$Decode.decodeValue,config.decoder,_p4._1);
         if (_p5.ctor === "Err") {
               return $Maybe.Nothing;
            } else {
               return $Maybe.Just({ctor: "_Tuple2",_0: _p4._0,_1: _p5._0});
            }
      });
      return A2($Task.map,
      function (_p6) {
         return decodePairList($ElmFire.toPairList(_p6));
      },
      A2($ElmFire.once,$ElmFire.valueChanged(config.orderOptions),config.location));
   };
   var getDict = function (config) {    return A2($Task.map,$Dict.fromList,getList(config));};
   var QueryError = function (a) {    return {ctor: "QueryError",_0: a};};
   var Unsubscribed = {ctor: "Unsubscribed"};
   var Undecodable = F2(function (a,b) {    return {ctor: "Undecodable",_0: a,_1: b};});
   var Removed = F2(function (a,b) {    return {ctor: "Removed",_0: a,_1: b};});
   var Changed = F2(function (a,b) {    return {ctor: "Changed",_0: a,_1: b};});
   var Added = F2(function (a,b) {    return {ctor: "Added",_0: a,_1: b};});
   var subscribeDelta = F2(function (addressee,config) {
      var subscribeEvent = F2(function (event,deltaOp) {
         return A4($ElmFire.subscribe,
         function (snapshot) {
            return A2($Signal.send,
            addressee,
            function () {
               var _p7 = A2($Json$Decode.decodeValue,config.decoder,snapshot.value);
               if (_p7.ctor === "Ok") {
                     return A2(deltaOp,snapshot.key,_p7._0);
                  } else {
                     return A2(Undecodable,snapshot.key,_p7._0);
                  }
            }());
         },
         function (cancellation) {
            return A2($Signal.send,
            addressee,
            function () {
               var _p8 = cancellation;
               if (_p8.ctor === "Unsubscribed") {
                     return Unsubscribed;
                  } else {
                     return QueryError(_p8._1);
                  }
            }());
         },
         event,
         config.location);
      });
      return A2($Task.andThen,
      A2(subscribeEvent,$ElmFire.childRemoved(config.orderOptions),Removed),
      function (s1) {
         return A2($Task.andThen,
         A2(subscribeEvent,$ElmFire.childChanged(config.orderOptions),Changed),
         function (s2) {
            return A2($Task.andThen,
            A2(subscribeEvent,$ElmFire.childAdded(config.orderOptions),Added),
            function (s3) {
               return $Task.succeed(A2($Task.andThen,
               $ElmFire.unsubscribe(s1),
               function (_p9) {
                  return A2($Task.andThen,$ElmFire.unsubscribe(s2),function (_p10) {    return $ElmFire.unsubscribe(s3);});
               }));
            });
         });
      });
   });
   var Idem = {ctor: "Idem"};
   var mirror = function (config) {
      var deltas = $Signal.mailbox(Idem);
      var init = A2(subscribeDelta,deltas.address,config);
      var sum = integrate(deltas.signal);
      return {ctor: "_Tuple2",_0: init,_1: sum};
   };
   var Config = F4(function (a,b,c,d) {    return {location: a,orderOptions: b,encoder: c,decoder: d};});
   return _elm.ElmFire.Dict.values = {_op: _op
                                     ,getDict: getDict
                                     ,getList: getList
                                     ,getKeys: getKeys
                                     ,getValues: getValues
                                     ,subscribeDelta: subscribeDelta
                                     ,update: update
                                     ,integrate: integrate
                                     ,mirror: mirror
                                     ,Config: Config
                                     ,Idem: Idem
                                     ,Added: Added
                                     ,Changed: Changed
                                     ,Removed: Removed
                                     ,Undecodable: Undecodable
                                     ,Unsubscribed: Unsubscribed
                                     ,QueryError: QueryError};
};