Elm.ElmFire = Elm.ElmFire || {};
Elm.ElmFire.Op = Elm.ElmFire.Op || {};
Elm.ElmFire.Op.make = function (_elm) {
   "use strict";
   _elm.ElmFire = _elm.ElmFire || {};
   _elm.ElmFire.Op = _elm.ElmFire.Op || {};
   if (_elm.ElmFire.Op.values) return _elm.ElmFire.Op.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $ElmFire = Elm.ElmFire.make(_elm),
   $ElmFire$Dict = Elm.ElmFire.Dict.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var operateFilterMapElemT = F3(function (config,
   filterMapping,
   key) {
      return A3($ElmFire.transaction,
      function (maybeJsonVal) {
         var _p0 = maybeJsonVal;
         if (_p0.ctor === "Nothing") {
               return $ElmFire.Abort;
            } else {
               var _p1 = A2($Json$Decode.decodeValue,config.decoder,_p0._0);
               if (_p1.ctor === "Err") {
                     return $ElmFire.Abort;
                  } else {
                     var _p2 = A2(filterMapping,key,_p1._0);
                     if (_p2.ctor === "Nothing") {
                           return $ElmFire.Remove;
                        } else {
                           return $ElmFire.Set(config.encoder(_p2._0));
                        }
                  }
            }
      },
      A2($ElmFire.sub,key,config.location),
      true);
   });
   var operateFilterMapTFun = F3(function (config,
   filterMapping,
   maybeJsonDict) {
      var _p3 = maybeJsonDict;
      if (_p3.ctor === "Nothing") {
            return $ElmFire.Abort;
         } else {
            var _p4 = A2($Json$Decode.decodeValue,
            $Json$Decode.keyValuePairs($Json$Decode.value),
            _p3._0);
            if (_p4.ctor === "Err") {
                  return $ElmFire.Abort;
               } else {
                  var newPairs = A2($List.filterMap,
                  function (_p5) {
                     var _p6 = _p5;
                     var _p10 = _p6._0;
                     var _p9 = _p6._1;
                     var _p7 = A2($Json$Decode.decodeValue,config.decoder,_p9);
                     if (_p7.ctor === "Err") {
                           return $Maybe.Just({ctor: "_Tuple2",_0: _p10,_1: _p9});
                        } else {
                           var _p8 = A2(filterMapping,_p10,_p7._0);
                           if (_p8.ctor === "Nothing") {
                                 return $Maybe.Nothing;
                              } else {
                                 return $Maybe.Just({ctor: "_Tuple2"
                                                    ,_0: _p10
                                                    ,_1: config.encoder(_p8._0)});
                              }
                        }
                  },
                  _p4._0);
                  return $ElmFire.Set($Json$Encode.object(newPairs));
               }
         }
   });
   var operateFilterElemT = F3(function (config,filter,key) {
      return A3($ElmFire.transaction,
      function (maybeJsonVal) {
         var _p11 = maybeJsonVal;
         if (_p11.ctor === "Nothing") {
               return $ElmFire.Abort;
            } else {
               var _p12 = A2($Json$Decode.decodeValue,
               config.decoder,
               _p11._0);
               if (_p12.ctor === "Err") {
                     return $ElmFire.Abort;
                  } else {
                     return A2(filter,
                     key,
                     _p12._0) ? $ElmFire.Abort : $ElmFire.Remove;
                  }
            }
      },
      A2($ElmFire.sub,key,config.location),
      true);
   });
   var operateFilterTFun = F3(function (config,
   filter,
   maybeJsonDict) {
      var _p13 = maybeJsonDict;
      if (_p13.ctor === "Nothing") {
            return $ElmFire.Abort;
         } else {
            var _p14 = A2($Json$Decode.decodeValue,
            $Json$Decode.keyValuePairs($Json$Decode.value),
            _p13._0);
            if (_p14.ctor === "Err") {
                  return $ElmFire.Abort;
               } else {
                  var newPairs = A2($List.filter,
                  function (_p15) {
                     var _p16 = _p15;
                     var _p17 = A2($Json$Decode.decodeValue,config.decoder,_p16._1);
                     if (_p17.ctor === "Err") {
                           return false;
                        } else {
                           return A2(filter,_p16._0,_p17._0);
                        }
                  },
                  _p14._0);
                  return $ElmFire.Set($Json$Encode.object(newPairs));
               }
         }
   });
   var operateMapElemT = F3(function (config,mapping,key) {
      return A3($ElmFire.transaction,
      function (maybeJsonVal) {
         var _p18 = maybeJsonVal;
         if (_p18.ctor === "Nothing") {
               return $ElmFire.Abort;
            } else {
               var _p19 = A2($Json$Decode.decodeValue,
               config.decoder,
               _p18._0);
               if (_p19.ctor === "Err") {
                     return $ElmFire.Abort;
                  } else {
                     return $ElmFire.Set(config.encoder(A2(mapping,key,_p19._0)));
                  }
            }
      },
      A2($ElmFire.sub,key,config.location),
      true);
   });
   var operateMapTFun = F3(function (config,
   mapping,
   maybeJsonDict) {
      var _p20 = maybeJsonDict;
      if (_p20.ctor === "Nothing") {
            return $ElmFire.Abort;
         } else {
            var _p21 = A2($Json$Decode.decodeValue,
            $Json$Decode.keyValuePairs($Json$Decode.value),
            _p20._0);
            if (_p21.ctor === "Err") {
                  return $ElmFire.Abort;
               } else {
                  var newPairs = A2($List.map,
                  function (_p22) {
                     var _p23 = _p22;
                     var _p26 = _p23._0;
                     var _p25 = _p23._1;
                     return {ctor: "_Tuple2"
                            ,_0: _p26
                            ,_1: function () {
                               var _p24 = A2($Json$Decode.decodeValue,config.decoder,_p25);
                               if (_p24.ctor === "Err") {
                                     return _p25;
                                  } else {
                                     return config.encoder(A2(mapping,_p26,_p24._0));
                                  }
                            }()};
                  },
                  _p21._0);
                  return $ElmFire.Set($Json$Encode.object(newPairs));
               }
         }
   });
   var operateUpdateFun = F3(function (config,alter,maybeJsonVal) {
      var _p27 = maybeJsonVal;
      if (_p27.ctor === "Nothing") {
            var _p28 = alter($Maybe.Nothing);
            if (_p28.ctor === "Nothing") {
                  return $ElmFire.Remove;
               } else {
                  return $ElmFire.Set(config.encoder(_p28._0));
               }
         } else {
            var _p29 = A2($Json$Decode.decodeValue,
            config.decoder,
            _p27._0);
            if (_p29.ctor === "Err") {
                  return $ElmFire.Abort;
               } else {
                  var _p30 = alter($Maybe.Just(_p29._0));
                  if (_p30.ctor === "Nothing") {
                        return $ElmFire.Remove;
                     } else {
                        return $ElmFire.Set(config.encoder(_p30._0));
                     }
               }
         }
   });
   var Parallel = {ctor: "Parallel"};
   var parallel = Parallel;
   var Sequential = {ctor: "Sequential"};
   var sequential = Sequential;
   var Atomic = {ctor: "Atomic"};
   var atomic = Atomic;
   var FilterMap = F2(function (a,b) {
      return {ctor: "FilterMap",_0: a,_1: b};
   });
   var filterMap = FilterMap;
   var Filter = F2(function (a,b) {
      return {ctor: "Filter",_0: a,_1: b};
   });
   var filter = Filter;
   var Map = F2(function (a,b) {
      return {ctor: "Map",_0: a,_1: b};
   });
   var map = Map;
   var RemoveList = F2(function (a,b) {
      return {ctor: "RemoveList",_0: a,_1: b};
   });
   var removeList = RemoveList;
   var InsertList = F2(function (a,b) {
      return {ctor: "InsertList",_0: a,_1: b};
   });
   var insertList = InsertList;
   var FromList = F2(function (a,b) {
      return {ctor: "FromList",_0: a,_1: b};
   });
   var fromList = FromList;
   var operate = F2(function (config,operation) {
      operate: while (true) {
         var transactionOp = function (transactFun) {
            return A2($Task.map,
            function (_p31) {
               return function (_) {
                  return _.reference;
               }($Basics.snd(_p31));
            },
            A3($ElmFire.transaction,transactFun,config.location,true));
         };
         var dispatchTaskList = F2(function (dispatch,taskList) {
            return _U.eq(dispatch,Parallel) ? A2($Task.andThen,
            $Task.sequence(A2($List.map,$Task.spawn,taskList)),
            function (_p32) {
               return $ElmFire.open(config.location);
            }) : A2($Task.andThen,
            $Task.sequence(taskList),
            function (_p33) {
               return $ElmFire.open(config.location);
            });
         });
         var getKeys = $ElmFire$Dict.getKeys(config);
         var encodePairs = function (pairs) {
            return $Json$Encode.object(A2($List.map,
            function (_p34) {
               var _p35 = _p34;
               return {ctor: "_Tuple2"
                      ,_0: _p35._0
                      ,_1: config.encoder(_p35._1)};
            },
            pairs));
         };
         var _p36 = operation;
         switch (_p36.ctor)
         {case "None": return $ElmFire.open(config.location);
            case "Insert": return A2($ElmFire.set,
              config.encoder(_p36._1),
              A2($ElmFire.sub,_p36._0,config.location));
            case "Push": return A2($ElmFire.set,
              config.encoder(_p36._0),
              $ElmFire.push(config.location));
            case "Update": return A2($Task.map,
              function (_p37) {
                 return function (_) {
                    return _.reference;
                 }($Basics.snd(_p37));
              },
              A3($ElmFire.transaction,
              A2(operateUpdateFun,config,_p36._1),
              A2($ElmFire.sub,_p36._0,config.location),
              true));
            case "Remove": return $ElmFire.remove(A2($ElmFire.sub,
              _p36._0,
              config.location));
            case "Empty": return $ElmFire.remove(config.location);
            case "FromDict": var _v26 = config,
              _v27 = A2(FromList,_p36._0,$Dict.toList(_p36._1));
              config = _v26;
              operation = _v27;
              continue operate;
            case "FromList": if (_p36._0.ctor === "Atomic") {
                    return A2($ElmFire.set,encodePairs(_p36._1),config.location);
                 } else {
                    return A2($Task.andThen,
                    $ElmFire.remove(config.location),
                    function (_p38) {
                       return A2(operate,config,A2(InsertList,_p36._0,_p36._1));
                    });
                 }
            case "InsertList": if (_p36._0.ctor === "Atomic") {
                    return A2($ElmFire.update,
                    encodePairs(_p36._1),
                    config.location);
                 } else {
                    return A2(dispatchTaskList,
                    _p36._0,
                    A2($List.map,
                    function (_p39) {
                       var _p40 = _p39;
                       return A2($ElmFire.set,
                       config.encoder(_p40._1),
                       A2($ElmFire.sub,_p40._0,config.location));
                    },
                    _p36._1));
                 }
            case "RemoveList": if (_p36._0.ctor === "Atomic") {
                    return A2($ElmFire.update,
                    $Json$Encode.object(A2($List.map,
                    function (key) {
                       return {ctor: "_Tuple2",_0: key,_1: $Json$Encode.$null};
                    },
                    _p36._1)),
                    config.location);
                 } else {
                    return A2(dispatchTaskList,
                    _p36._0,
                    A2($List.map,
                    function (key) {
                       return $ElmFire.remove(A2($ElmFire.sub,key,config.location));
                    },
                    _p36._1));
                 }
            case "Map": if (_p36._0.ctor === "Atomic") {
                    return transactionOp(A2(operateMapTFun,config,_p36._1));
                 } else {
                    return A2($Task.andThen,
                    getKeys,
                    function (keys) {
                       return A2(dispatchTaskList,
                       _p36._0,
                       A2($List.map,A2(operateMapElemT,config,_p36._1),keys));
                    });
                 }
            case "Filter": if (_p36._0.ctor === "Atomic") {
                    return transactionOp(A2(operateFilterTFun,config,_p36._1));
                 } else {
                    return A2($Task.andThen,
                    getKeys,
                    function (keys) {
                       return A2(dispatchTaskList,
                       _p36._0,
                       A2($List.map,A2(operateFilterElemT,config,_p36._1),keys));
                    });
                 }
            default: if (_p36._0.ctor === "Atomic") {
                    return transactionOp(A2(operateFilterMapTFun,
                    config,
                    _p36._1));
                 } else {
                    return A2($Task.andThen,
                    getKeys,
                    function (keys) {
                       return A2(dispatchTaskList,
                       _p36._0,
                       A2($List.map,A2(operateFilterMapElemT,config,_p36._1),keys));
                    });
                 }}
      }
   });
   var forwardOperation = F2(function (taskAddressee,config) {
      return A2($Signal.forwardTo,taskAddressee,operate(config));
   });
   var FromDict = F2(function (a,b) {
      return {ctor: "FromDict",_0: a,_1: b};
   });
   var fromDict = FromDict;
   var Empty = {ctor: "Empty"};
   var empty = Empty;
   var Remove = function (a) {    return {ctor: "Remove",_0: a};};
   var remove = Remove;
   var Update = F2(function (a,b) {
      return {ctor: "Update",_0: a,_1: b};
   });
   var update = Update;
   var Push = function (a) {    return {ctor: "Push",_0: a};};
   var push = Push;
   var Insert = F2(function (a,b) {
      return {ctor: "Insert",_0: a,_1: b};
   });
   var insert = Insert;
   var None = {ctor: "None"};
   var none = None;
   var Config = F4(function (a,b,c,d) {
      return {location: a,orderOptions: b,encoder: c,decoder: d};
   });
   return _elm.ElmFire.Op.values = {_op: _op
                                   ,none: none
                                   ,insert: insert
                                   ,push: push
                                   ,update: update
                                   ,remove: remove
                                   ,empty: empty
                                   ,fromDict: fromDict
                                   ,fromList: fromList
                                   ,insertList: insertList
                                   ,removeList: removeList
                                   ,map: map
                                   ,filter: filter
                                   ,filterMap: filterMap
                                   ,atomic: atomic
                                   ,sequential: sequential
                                   ,parallel: parallel
                                   ,operate: operate
                                   ,forwardOperation: forwardOperation
                                   ,Config: Config};
};